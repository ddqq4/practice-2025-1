from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes,
    ConversationHandler
)
from datetime import datetime, timedelta
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
SET_REMINDER_TEXT, SET_REMINDER_TIME = range(2)

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
user_reminders = {}  # {user_id: [{"text": str, "time": datetime}]}
materials = [  # –ü—Ä–∏–º–µ—Ä —É—á–µ–±–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    {"title": "–õ–µ–∫—Ü–∏—è 1: –í–≤–µ–¥–µ–Ω–∏–µ", "file_id": None},
    {"title": "–õ–µ–∫—Ü–∏—è 2: –û—Å–Ω–æ–≤—ã", "file_id": None}
]

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await update.message.reply_html(
        rf"–ü—Ä–∏–≤–µ—Ç {user.mention_html()}! –Ø –±–æ—Ç-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è.",
        reply_markup=main_menu_keyboard()
    )

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu_keyboard():
    keyboard = [
        [InlineKeyboardButton("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data='reminders')],
        [InlineKeyboardButton("–ú–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data='materials')],
        [InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data='help')]
    ]
    return InlineKeyboardMarkup(keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == 'reminders':
        await query.edit_message_text(
            "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏:",
            reply_markup=reminders_keyboard()
        )
    elif query.data == 'materials':
        await send_lectures(update, context)
    elif query.data == 'help':
        await help_command(update, context)
    elif query.data == 'back':
        await query.edit_message_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=main_menu_keyboard()
        )

# –ú–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
def reminders_keyboard():
    keyboard = [
        [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data='add_reminder')],
        [InlineKeyboardButton("–ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data='list_reminders')],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')]
    ]
    return InlineKeyboardMarkup(keyboard)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è - –Ω–∞—á–∞–ª–æ
async def add_reminder_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:"
    )
    return SET_REMINDER_TEXT

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def set_reminder_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['reminder_text'] = update.message.text
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30):"
    )
    return SET_REMINDER_TIME

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def set_reminder_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        reminder_time = datetime.strptime(update.message.text, "%H:%M").time()
        now = datetime.now()
        reminder_datetime = datetime.combine(now.date(), reminder_time)
        
        if reminder_datetime < now:
            reminder_datetime += timedelta(days=1)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç–∏
        if user_id not in user_reminders:
            user_reminders[user_id] = []
            
        user_reminders[user_id].append({
            "text": context.user_data['reminder_text'],
            "time": reminder_datetime
        })
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Job
        context.job_queue.run_once(
            send_reminder,
            reminder_datetime - now,
            chat_id=update.effective_chat.id,
            data=context.user_data['reminder_text']
        )
        
        await update.message.reply_text(
            f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {reminder_datetime.strftime('%d.%m.%Y %H:%M')}",
            reply_markup=main_menu_keyboard()
        )
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return SET_REMINDER_TIME
    
    return ConversationHandler.END

# –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def list_reminders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in user_reminders and user_reminders[user_id]:
        reminders_list = "\n".join(
            f"{i+1}. {rem['text']} - {rem['time'].strftime('%d.%m.%Y %H:%M')}"
            for i, rem in enumerate(user_reminders[user_id])
        )
        await update.callback_query.edit_message_text(
            f"–í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n{reminders_list}",
            reply_markup=reminders_keyboard()
        )
    else:
        await update.callback_query.edit_message_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.",
            reply_markup=reminders_keyboard()
        )

# –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def send_reminder(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    await context.bot.send_message(job.chat_id, text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {job.data}")

# –°–ø–∏—Å–æ–∫ –ª–µ–∫—Ü–∏–π
async def send_lectures(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if materials:
        for material in materials:
            if material['file_id']:
                await context.bot.send_document(
                    chat_id=update.effective_chat.id,
                    document=material['file_id'],
                    caption=material['title']
                )
            else:
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=material['title']
                )
    else:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        )
    
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu_keyboard()
    )

# –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
üìö <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/reminders - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
/materials - –£—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã

ü§ñ <b>–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:</b>
- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–Ω—è—Ç–∏—è—Ö
- –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
- –û—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã
"""
    await update.message.reply_html(help_text)

# –û—à–∏–±–∫–∏
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(msg="Exception while handling update:", exc_info=context.error)
    await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def main():
    # –°–æ–∑–¥–∞–µ–º Application
    application = Application.builder().token("–í–ê–®_TELEGRAM_BOT_TOKEN").build()
    
    # ConversationHandler –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(add_reminder_start, pattern='^add_reminder$')],
        states={
            SET_REMINDER_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_reminder_text)],
            SET_REMINDER_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_reminder_time)]
        },
        fallbacks=[CommandHandler('cancel', start)]
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(conv_handler)
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(CallbackQueryHandler(list_reminders, pattern='^list_reminders$'))
    application.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()
